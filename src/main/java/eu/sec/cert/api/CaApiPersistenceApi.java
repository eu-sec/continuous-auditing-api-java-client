/*
 * EU-SEC CA API
 * This is audit-api serves evidences for a continuous audit. In the EU-Sec project such evidences are collected and evaluated to determine the compliance status based on controls from the    [ccm](https://cloudsecurityalliance.org/group/cloud-controls-matrix).
 *
 * OpenAPI spec version: 1.0.8
 * Contact: contact@sec-cert.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package eu.sec.cert.api;

import eu.sec.cert.ApiCallback;
import eu.sec.cert.ApiClient;
import eu.sec.cert.ApiException;
import eu.sec.cert.ApiResponse;
import eu.sec.cert.Configuration;
import eu.sec.cert.Pair;
import eu.sec.cert.ProgressRequestBody;
import eu.sec.cert.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import eu.sec.cert.model.EncryptionStorageResponse;
import eu.sec.cert.model.GeoLocation;
import eu.sec.cert.model.LocationStorageResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CaApiPersistenceApi {
    private ApiClient apiClient;

    public CaApiPersistenceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CaApiPersistenceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getEncryptionInfo
     * @param objectId ID of either objectId on SaaS level or storeageId on lower level (required)
     * @param scope Scope of the service (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEncryptionInfoCall(String objectId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/persistence/{objectId}/encryption"
            .replaceAll("\\{" + "objectId" + "\\}", apiClient.escapeString(objectId.toString()))
            .replaceAll("\\{" + "scope" + "\\}", apiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key", "basic_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEncryptionInfoValidateBeforeCall(String objectId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getEncryptionInfo(Async)");
        }
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getEncryptionInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = getEncryptionInfoCall(objectId, scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves the encryption info of an object.
     * Based on CCM-EKM-04. Retrieves the encryption info of an object. Propper interpretation has to be performed by the audit tool.
     * @param objectId ID of either objectId on SaaS level or storeageId on lower level (required)
     * @param scope Scope of the service (required)
     * @return EncryptionStorageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EncryptionStorageResponse getEncryptionInfo(String objectId, String scope) throws ApiException {
        ApiResponse<EncryptionStorageResponse> resp = getEncryptionInfoWithHttpInfo(objectId, scope);
        return resp.getData();
    }

    /**
     * Retrieves the encryption info of an object.
     * Based on CCM-EKM-04. Retrieves the encryption info of an object. Propper interpretation has to be performed by the audit tool.
     * @param objectId ID of either objectId on SaaS level or storeageId on lower level (required)
     * @param scope Scope of the service (required)
     * @return ApiResponse&lt;EncryptionStorageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EncryptionStorageResponse> getEncryptionInfoWithHttpInfo(String objectId, String scope) throws ApiException {
        com.squareup.okhttp.Call call = getEncryptionInfoValidateBeforeCall(objectId, scope, null, null);
        Type localVarReturnType = new TypeToken<EncryptionStorageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the encryption info of an object. (asynchronously)
     * Based on CCM-EKM-04. Retrieves the encryption info of an object. Propper interpretation has to be performed by the audit tool.
     * @param objectId ID of either objectId on SaaS level or storeageId on lower level (required)
     * @param scope Scope of the service (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEncryptionInfoAsync(String objectId, String scope, final ApiCallback<EncryptionStorageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEncryptionInfoValidateBeforeCall(objectId, scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EncryptionStorageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLocation
     * @param objectId ID of either objectId on SaaS level or storeageId on lower level (required)
     * @param scope Scope of the service (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLocationCall(String objectId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/persistence/{objectId}/location/"
            .replaceAll("\\{" + "objectId" + "\\}", apiClient.escapeString(objectId.toString()))
            .replaceAll("\\{" + "scope" + "\\}", apiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key", "basic_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLocationValidateBeforeCall(String objectId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getLocation(Async)");
        }
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getLocation(Async)");
        }
        

        com.squareup.okhttp.Call call = getLocationCall(objectId, scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns location the ISO 3166-1 alpha-2 country code of the location of the data of the object
     * Retrieves the data location of an object. Returns location the ISO 3166-1 alpha-2 country code of the location of the data of the object. Based on CCM-STA-05.
     * @param objectId ID of either objectId on SaaS level or storeageId on lower level (required)
     * @param scope Scope of the service (required)
     * @return GeoLocation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GeoLocation getLocation(String objectId, String scope) throws ApiException {
        ApiResponse<GeoLocation> resp = getLocationWithHttpInfo(objectId, scope);
        return resp.getData();
    }

    /**
     * Returns location the ISO 3166-1 alpha-2 country code of the location of the data of the object
     * Retrieves the data location of an object. Returns location the ISO 3166-1 alpha-2 country code of the location of the data of the object. Based on CCM-STA-05.
     * @param objectId ID of either objectId on SaaS level or storeageId on lower level (required)
     * @param scope Scope of the service (required)
     * @return ApiResponse&lt;GeoLocation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GeoLocation> getLocationWithHttpInfo(String objectId, String scope) throws ApiException {
        com.squareup.okhttp.Call call = getLocationValidateBeforeCall(objectId, scope, null, null);
        Type localVarReturnType = new TypeToken<GeoLocation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns location the ISO 3166-1 alpha-2 country code of the location of the data of the object (asynchronously)
     * Retrieves the data location of an object. Returns location the ISO 3166-1 alpha-2 country code of the location of the data of the object. Based on CCM-STA-05.
     * @param objectId ID of either objectId on SaaS level or storeageId on lower level (required)
     * @param scope Scope of the service (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLocationAsync(String objectId, String scope, final ApiCallback<GeoLocation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLocationValidateBeforeCall(objectId, scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GeoLocation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStorage
     * @param objectId ID of data object to return (required)
     * @param scope Scope of service (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStorageCall(String objectId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/persistence/{objectId}/storage/"
            .replaceAll("\\{" + "objectId" + "\\}", apiClient.escapeString(objectId.toString()))
            .replaceAll("\\{" + "scope" + "\\}", apiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key", "basic_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStorageValidateBeforeCall(String objectId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getStorage(Async)");
        }
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getStorage(Async)");
        }
        

        com.squareup.okhttp.Call call = getStorageCall(objectId, scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns persistence information for a particular data object by its Id
     * Depending on the kind of storage this call returns an identifier of the particular storage entity. E.g database name, RDS id, Harddrive, SMB location etc. If stored on multiple services all are returned. Based on CCM-GRM-02. This requires each logical object to be traceable to its physical persistence capabilities.
     * @param objectId ID of data object to return (required)
     * @param scope Scope of service (required)
     * @return LocationStorageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LocationStorageResponse getStorage(String objectId, String scope) throws ApiException {
        ApiResponse<LocationStorageResponse> resp = getStorageWithHttpInfo(objectId, scope);
        return resp.getData();
    }

    /**
     * Returns persistence information for a particular data object by its Id
     * Depending on the kind of storage this call returns an identifier of the particular storage entity. E.g database name, RDS id, Harddrive, SMB location etc. If stored on multiple services all are returned. Based on CCM-GRM-02. This requires each logical object to be traceable to its physical persistence capabilities.
     * @param objectId ID of data object to return (required)
     * @param scope Scope of service (required)
     * @return ApiResponse&lt;LocationStorageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LocationStorageResponse> getStorageWithHttpInfo(String objectId, String scope) throws ApiException {
        com.squareup.okhttp.Call call = getStorageValidateBeforeCall(objectId, scope, null, null);
        Type localVarReturnType = new TypeToken<LocationStorageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns persistence information for a particular data object by its Id (asynchronously)
     * Depending on the kind of storage this call returns an identifier of the particular storage entity. E.g database name, RDS id, Harddrive, SMB location etc. If stored on multiple services all are returned. Based on CCM-GRM-02. This requires each logical object to be traceable to its physical persistence capabilities.
     * @param objectId ID of data object to return (required)
     * @param scope Scope of service (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStorageAsync(String objectId, String scope, final ApiCallback<LocationStorageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStorageValidateBeforeCall(objectId, scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LocationStorageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
