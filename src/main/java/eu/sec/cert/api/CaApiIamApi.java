/*
 * EU-SEC CA API
 * This is audit-api serves evidences for a continuous audit. In the EU-Sec project such evidences are collected and evaluated to determine the compliance status based on controls from the    [ccm](https://cloudsecurityalliance.org/group/cloud-controls-matrix).
 *
 * OpenAPI spec version: 1.0.7
 * Contact: contact@sec-cert.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package eu.sec.cert.api;

import eu.sec.cert.ApiCallback;
import eu.sec.cert.ApiClient;
import eu.sec.cert.ApiException;
import eu.sec.cert.ApiResponse;
import eu.sec.cert.Configuration;
import eu.sec.cert.Pair;
import eu.sec.cert.ProgressRequestBody;
import eu.sec.cert.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import eu.sec.cert.model.AccessRequest;
import eu.sec.cert.model.AccessResponse;
import eu.sec.cert.model.AdminAuth;
import eu.sec.cert.model.AdminResponse;
import eu.sec.cert.model.GroupsResponse;
import eu.sec.cert.model.LoginResponse;
import eu.sec.cert.model.PasswordRequirementsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CaApiIamApi {
    private ApiClient apiClient;

    public CaApiIamApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CaApiIamApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAdmins
     * @param scope Scope of the service (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAdminsCall(String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/identityfederation/admins/"
            .replaceAll("\\{" + "scope" + "\\}", apiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAdminsValidateBeforeCall(String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getAdmins(Async)");
        }
        

        com.squareup.okhttp.Call call = getAdminsCall(scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a list of administrators
     * Based on CCM-IAM-12. Reads out all administrators of the application and returns them.
     * @param scope Scope of the service (required)
     * @return AdminResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdminResponse getAdmins(String scope) throws ApiException {
        ApiResponse<AdminResponse> resp = getAdminsWithHttpInfo(scope);
        return resp.getData();
    }

    /**
     * Returns a list of administrators
     * Based on CCM-IAM-12. Reads out all administrators of the application and returns them.
     * @param scope Scope of the service (required)
     * @return ApiResponse&lt;AdminResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdminResponse> getAdminsWithHttpInfo(String scope) throws ApiException {
        com.squareup.okhttp.Call call = getAdminsValidateBeforeCall(scope, null, null);
        Type localVarReturnType = new TypeToken<AdminResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of administrators (asynchronously)
     * Based on CCM-IAM-12. Reads out all administrators of the application and returns them.
     * @param scope Scope of the service (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAdminsAsync(String scope, final ApiCallback<AdminResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAdminsValidateBeforeCall(scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdminResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getObjectAccess
     * @param request request object (required)
     * @param scope Scope of the service (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getObjectAccessCall(AccessRequest request, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/{scope}/identityfederation/data/access"
            .replaceAll("\\{" + "scope" + "\\}", apiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getObjectAccessValidateBeforeCall(AccessRequest request, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling getObjectAccess(Async)");
        }
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getObjectAccess(Async)");
        }
        

        com.squareup.okhttp.Call call = getObjectAccessCall(request, scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Checks whether a user has a certain access to an object.
     * Checks whether a user has a certain access to an object.
     * @param request request object (required)
     * @param scope Scope of the service (required)
     * @return AccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccessResponse getObjectAccess(AccessRequest request, String scope) throws ApiException {
        ApiResponse<AccessResponse> resp = getObjectAccessWithHttpInfo(request, scope);
        return resp.getData();
    }

    /**
     * Checks whether a user has a certain access to an object.
     * Checks whether a user has a certain access to an object.
     * @param request request object (required)
     * @param scope Scope of the service (required)
     * @return ApiResponse&lt;AccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccessResponse> getObjectAccessWithHttpInfo(AccessRequest request, String scope) throws ApiException {
        com.squareup.okhttp.Call call = getObjectAccessValidateBeforeCall(request, scope, null, null);
        Type localVarReturnType = new TypeToken<AccessResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Checks whether a user has a certain access to an object. (asynchronously)
     * Checks whether a user has a certain access to an object.
     * @param request request object (required)
     * @param scope Scope of the service (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getObjectAccessAsync(AccessRequest request, String scope, final ApiCallback<AccessResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getObjectAccessValidateBeforeCall(request, scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccessResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPasswordRequirements
     * @param userId ID of user (required)
     * @param scope Scope of the service (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPasswordRequirementsCall(String userId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/identityfederation/{userId}/passwordRequirements"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "scope" + "\\}", apiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPasswordRequirementsValidateBeforeCall(String userId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getPasswordRequirements(Async)");
        }
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getPasswordRequirements(Async)");
        }
        

        com.squareup.okhttp.Call call = getPasswordRequirementsCall(userId, scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * returns the password requirements for a specific user
     * Based on CCM-IAM-12. Strong authentication might require a strong password. Password requirements are a indicator for strong password and therefore can be part of an audit.
     * @param userId ID of user (required)
     * @param scope Scope of the service (required)
     * @return PasswordRequirementsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PasswordRequirementsResponse getPasswordRequirements(String userId, String scope) throws ApiException {
        ApiResponse<PasswordRequirementsResponse> resp = getPasswordRequirementsWithHttpInfo(userId, scope);
        return resp.getData();
    }

    /**
     * returns the password requirements for a specific user
     * Based on CCM-IAM-12. Strong authentication might require a strong password. Password requirements are a indicator for strong password and therefore can be part of an audit.
     * @param userId ID of user (required)
     * @param scope Scope of the service (required)
     * @return ApiResponse&lt;PasswordRequirementsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PasswordRequirementsResponse> getPasswordRequirementsWithHttpInfo(String userId, String scope) throws ApiException {
        com.squareup.okhttp.Call call = getPasswordRequirementsValidateBeforeCall(userId, scope, null, null);
        Type localVarReturnType = new TypeToken<PasswordRequirementsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * returns the password requirements for a specific user (asynchronously)
     * Based on CCM-IAM-12. Strong authentication might require a strong password. Password requirements are a indicator for strong password and therefore can be part of an audit.
     * @param userId ID of user (required)
     * @param scope Scope of the service (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPasswordRequirementsAsync(String userId, String scope, final ApiCallback<PasswordRequirementsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPasswordRequirementsValidateBeforeCall(userId, scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PasswordRequirementsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserAccesses
     * @param userId ID of user (required)
     * @param scope Scope of the service (required)
     * @param from from date in ISO-8601 format e.g 2005-08-15T15:52:01+0000 (optional)
     * @param to to date in ISO-8601 format  e.g 2005-08-15T15:52:01+0000 (optional)
     * @param limit Limits the number of retuned values (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserAccessesCall(String userId, String scope, String from, String to, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/identityfederation/{userId}/logins"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "scope" + "\\}", apiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserAccessesValidateBeforeCall(String userId, String scope, String from, String to, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserAccesses(Async)");
        }
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getUserAccesses(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserAccessesCall(userId, scope, from, to, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a list of the last logins of a user
     * Based on CCM-IAM-12. Whenever a user logs in into the application this kind access gets logged. This call returns the last accesses of a particular user based on existing logs.
     * @param userId ID of user (required)
     * @param scope Scope of the service (required)
     * @param from from date in ISO-8601 format e.g 2005-08-15T15:52:01+0000 (optional)
     * @param to to date in ISO-8601 format  e.g 2005-08-15T15:52:01+0000 (optional)
     * @param limit Limits the number of retuned values (optional)
     * @return LoginResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoginResponse getUserAccesses(String userId, String scope, String from, String to, Integer limit) throws ApiException {
        ApiResponse<LoginResponse> resp = getUserAccessesWithHttpInfo(userId, scope, from, to, limit);
        return resp.getData();
    }

    /**
     * Returns a list of the last logins of a user
     * Based on CCM-IAM-12. Whenever a user logs in into the application this kind access gets logged. This call returns the last accesses of a particular user based on existing logs.
     * @param userId ID of user (required)
     * @param scope Scope of the service (required)
     * @param from from date in ISO-8601 format e.g 2005-08-15T15:52:01+0000 (optional)
     * @param to to date in ISO-8601 format  e.g 2005-08-15T15:52:01+0000 (optional)
     * @param limit Limits the number of retuned values (optional)
     * @return ApiResponse&lt;LoginResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoginResponse> getUserAccessesWithHttpInfo(String userId, String scope, String from, String to, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getUserAccessesValidateBeforeCall(userId, scope, from, to, limit, null, null);
        Type localVarReturnType = new TypeToken<LoginResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of the last logins of a user (asynchronously)
     * Based on CCM-IAM-12. Whenever a user logs in into the application this kind access gets logged. This call returns the last accesses of a particular user based on existing logs.
     * @param userId ID of user (required)
     * @param scope Scope of the service (required)
     * @param from from date in ISO-8601 format e.g 2005-08-15T15:52:01+0000 (optional)
     * @param to to date in ISO-8601 format  e.g 2005-08-15T15:52:01+0000 (optional)
     * @param limit Limits the number of retuned values (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserAccessesAsync(String userId, String scope, String from, String to, Integer limit, final ApiCallback<LoginResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserAccessesValidateBeforeCall(userId, scope, from, to, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LoginResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserAuthType
     * @param userId ID of user (required)
     * @param scope Scope of the service (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserAuthTypeCall(String userId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/identityfederation/{userId}/auth"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "scope" + "\\}", apiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserAuthTypeValidateBeforeCall(String userId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserAuthType(Async)");
        }
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getUserAuthType(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserAuthTypeCall(userId, scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns the authentication type of a user. E.g password, two-factor
     * Based on CCM-IAM-12. Reads out a particular users authentication settings and returns them. Propper interpretation has to be performed by the audit tool.
     * @param userId ID of user (required)
     * @param scope Scope of the service (required)
     * @return AdminAuth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdminAuth getUserAuthType(String userId, String scope) throws ApiException {
        ApiResponse<AdminAuth> resp = getUserAuthTypeWithHttpInfo(userId, scope);
        return resp.getData();
    }

    /**
     * Returns the authentication type of a user. E.g password, two-factor
     * Based on CCM-IAM-12. Reads out a particular users authentication settings and returns them. Propper interpretation has to be performed by the audit tool.
     * @param userId ID of user (required)
     * @param scope Scope of the service (required)
     * @return ApiResponse&lt;AdminAuth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdminAuth> getUserAuthTypeWithHttpInfo(String userId, String scope) throws ApiException {
        com.squareup.okhttp.Call call = getUserAuthTypeValidateBeforeCall(userId, scope, null, null);
        Type localVarReturnType = new TypeToken<AdminAuth>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the authentication type of a user. E.g password, two-factor (asynchronously)
     * Based on CCM-IAM-12. Reads out a particular users authentication settings and returns them. Propper interpretation has to be performed by the audit tool.
     * @param userId ID of user (required)
     * @param scope Scope of the service (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserAuthTypeAsync(String userId, String scope, final ApiCallback<AdminAuth> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserAuthTypeValidateBeforeCall(userId, scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdminAuth>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserOrganisation
     * @param userId ID of user (required)
     * @param scope Scope of the service (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserOrganisationCall(String userId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/identityfederation/{userId}/groups"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "scope" + "\\}", apiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserOrganisationValidateBeforeCall(String userId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserOrganisation(Async)");
        }
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getUserOrganisation(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserOrganisationCall(userId, scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns the groups of a user
     * Based on CCM-IAM-12. Depending on the implementation a group can be e.g a unix group, organisation, role etc.
     * @param userId ID of user (required)
     * @param scope Scope of the service (required)
     * @return GroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupsResponse getUserOrganisation(String userId, String scope) throws ApiException {
        ApiResponse<GroupsResponse> resp = getUserOrganisationWithHttpInfo(userId, scope);
        return resp.getData();
    }

    /**
     * Returns the groups of a user
     * Based on CCM-IAM-12. Depending on the implementation a group can be e.g a unix group, organisation, role etc.
     * @param userId ID of user (required)
     * @param scope Scope of the service (required)
     * @return ApiResponse&lt;GroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupsResponse> getUserOrganisationWithHttpInfo(String userId, String scope) throws ApiException {
        com.squareup.okhttp.Call call = getUserOrganisationValidateBeforeCall(userId, scope, null, null);
        Type localVarReturnType = new TypeToken<GroupsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the groups of a user (asynchronously)
     * Based on CCM-IAM-12. Depending on the implementation a group can be e.g a unix group, organisation, role etc.
     * @param userId ID of user (required)
     * @param scope Scope of the service (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserOrganisationAsync(String userId, String scope, final ApiCallback<GroupsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserOrganisationValidateBeforeCall(userId, scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
